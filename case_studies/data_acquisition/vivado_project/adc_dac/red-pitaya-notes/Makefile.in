# Makefile.in generated by automake 1.16.5 from Makefile.am.
# @configure_input@

# Copyright (C) 1994-2021 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

# ////////////////////////////////////////////////////////////////////////// //
#
# This file is part of the anacleto project.
# Copyright 2018 Andrea Rigoni Garola <andrea.rigoni@igi.cnr.it>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# ////////////////////////////////////////////////////////////////////////// //
VPATH = @srcdir@
am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
target_triplet = @target@
@BUILD_CUSTOM_GNUMAKE_TRUE@am__append_1 = gnu-make
@IDE_CODE_LOCAL_TRUE@am__append_2 = $(IDE_CODE_LOCAL_DIR)
subdir = fpga/lib/red-pitaya-notes
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/conf/m4/ax_compare_version.m4 \
	$(top_srcdir)/conf/m4/ax_config_subdirs.m4 \
	$(top_srcdir)/conf/m4/ax_defun_local.m4 \
	$(top_srcdir)/conf/m4/ax_docker_build.m4 \
	$(top_srcdir)/conf/m4/ax_enable_kconfig.m4 \
	$(top_srcdir)/conf/m4/ax_gitignore_list.m4 \
	$(top_srcdir)/conf/m4/ax_prog_doxygen.m4 \
	$(top_srcdir)/conf/m4/ax_project_variables.m4 \
	$(top_srcdir)/conf/m4/ax_target_selfhelp.m4 \
	$(top_srcdir)/conf/m4/m4_ax_check_enable_debug.m4 \
	$(top_srcdir)/conf/m4/m4_ax_configure_args.m4 \
	$(top_srcdir)/conf/m4/m4_ax_is_release.m4 \
	$(top_srcdir)/conf/m4/m4_ax_valgrind_check.m4 \
	$(top_srcdir)/conf/kscripts/docker.ac \
	$(top_srcdir)/conf/kscripts/build_common.ac \
	$(top_srcdir)/conf/kscripts/toolchain.ac \
	$(top_srcdir)/conf/autoconf-doxygen/doxygen.ac \
	$(top_srcdir)/conf/kscripts/ext_mdsplus.ac \
	$(top_srcdir)/conf/kscripts/linux.ac \
	$(top_srcdir)/fpga/configure.ac \
	$(top_srcdir)/fpga/lib/rfx/configure.ac \
	$(top_srcdir)/projects/configure.ac $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
AM_V_P = $(am__v_P_@AM_V@)
am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 = 
SOURCES =
DIST_SOURCES =
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
am__DIST_COMMON = $(srcdir)/Makefile.in $(top_srcdir)/Common.mk \
	$(top_srcdir)/conf/kscripts/build_common.mk \
	$(top_srcdir)/conf/kscripts/docker.mk \
	$(top_srcdir)/conf/kscripts/toolchain.mk \
	$(top_srcdir)/fpga/Common.mk README.md
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AM_DEFAULT_VERBOSITY = $(VERBOSE_LEVEL)
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
BOARD = @BOARD@
BOARD_PART = @BOARD_PART@
BOARD_PRESET = @BOARD_PRESET@
BUILD_CUSTOM_GNUMAKE_DIR = @BUILD_CUSTOM_GNUMAKE_DIR@
BUILD_CUSTOM_GNUMAKE_URL = @BUILD_CUSTOM_GNUMAKE_URL@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CODE_SERVER_AUTH = @CODE_SERVER_AUTH@
CODE_SERVER_HOST = @CODE_SERVER_HOST@
CODE_SERVER_PORT = @CODE_SERVER_PORT@
CODE_SERVER_URL = @CODE_SERVER_URL@
CONFIG_STATUS_DEPENDENCIES = @CONFIG_STATUS_DEPENDENCIES@
CONFIG_SUBDIRS = @CONFIG_SUBDIRS@
CPPFLAGS = @CPPFLAGS@
CROSS_COMPILE = arm-linux-gnueabihf-
CSCOPE = @CSCOPE@
CTAGS = @CTAGS@
CURL = @CURL@
CXX = @CXX@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DEVICETREE_BASEFILES_TAR = @DEVICETREE_BASEFILES_TAR@
DEVICE_ACCESS = @DEVICE_ACCESS@
DEVICE_BOOT_DIR = @DEVICE_BOOT_DIR@
DEVICE_IP = @DEVICE_IP@
DEVICE_MODULES_DIR = @DEVICE_MODULES_DIR@
DEVICE_NAME = @DEVICE_NAME@
DEVICE_PASSWD = @DEVICE_PASSWD@
DEVICE_SSHKEY = @DEVICE_SSHKEY@
DEVICE_USER = @DEVICE_USER@
DOCKER_ENTRYPOINT = @DOCKER_ENTRYPOINT@
DOCKER_NETWORKS = @DOCKER_NETWORKS@
DOCKER_PROFILE = @DOCKER_PROFILE@
DOCKER_PROFILE_debug = @DOCKER_PROFILE_debug@
DOCKER_PS1 = @DOCKER_PS1@
DOCKER_RUNARGS = @DOCKER_RUNARGS@
DOCKER_SHARES = @DOCKER_SHARES@
DOT_PATH = @DOT_PATH@
DOWNLOADS = @DOWNLOADS@
DOWNLOAD_DIR = @DOWNLOAD_DIR@
DOXYGEN_BINARY = @DOXYGEN_BINARY@
DOXYGEN_CHI = @DOXYGEN_CHI@
DOXYGEN_CHM = @DOXYGEN_CHM@
DOXYGEN_DOT = @DOXYGEN_DOT@
DOXYGEN_HTML = @DOXYGEN_HTML@
DOXYGEN_MAN = @DOXYGEN_MAN@
DOXYGEN_MODULES = @DOXYGEN_MODULES@
DOXYGEN_MODULES_AVAILABLE = @DOXYGEN_MODULES_AVAILABLE@
DOXYGEN_MODULES_DISABLED = @DOXYGEN_MODULES_DISABLED@
DOXYGEN_MODULES_ENABLED = @DOXYGEN_MODULES_ENABLED@
DOXYGEN_PAPER_SIZE = @DOXYGEN_PAPER_SIZE@
DOXYGEN_PDF = @DOXYGEN_PDF@
DOXYGEN_PS = @DOXYGEN_PS@
DOXYGEN_RTF = @DOXYGEN_RTF@
DOXYGEN_XML = @DOXYGEN_XML@
DX_CONFIG = @DX_CONFIG@
DX_DOCDIR = @DX_DOCDIR@
DX_DOT = @DX_DOT@
DX_DVIPS = @DX_DVIPS@
DX_EGREP = @DX_EGREP@
DX_HHC = @DX_HHC@
DX_LATEX = @DX_LATEX@
DX_MAKEINDEX = @DX_MAKEINDEX@
DX_PDFLATEX = @DX_PDFLATEX@
DX_PERL = @DX_PERL@
DX_PROJECT = @DX_PROJECT@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
ETAGS = @ETAGS@
EXEEXT = @EXEEXT@
EXT_MDSPLUS_BRANCH = @EXT_MDSPLUS_BRANCH@
EXT_MDSPLUS_CONFIGURE_ARGS = @EXT_MDSPLUS_CONFIGURE_ARGS@
EXT_MDSPLUS_URL = @EXT_MDSPLUS_URL@
EXT_MODULES = @EXT_MODULES@
FIND = @FIND@
GENERATE_CHI = @GENERATE_CHI@
GENERATE_HTML = @GENERATE_HTML@
GENERATE_HTMLHELP = @GENERATE_HTMLHELP@
GENERATE_LATEX = @GENERATE_LATEX@
GENERATE_MAN = @GENERATE_MAN@
GENERATE_RTF = @GENERATE_RTF@
GENERATE_XML = @GENERATE_XML@
HAVE_DOCKER = @HAVE_DOCKER@
HAVE_DOT = @HAVE_DOT@
HHC_PATH = @HHC_PATH@
IDE = @IDE@
IDE_BIN = @IDE_BIN@
IDE_CODE_DOWNLOAD_URL = @IDE_CODE_DOWNLOAD_URL@
IDE_CODE_LOCAL_DIR = @IDE_CODE_LOCAL_DIR@
IDE_CODE_LOCAL_EXTENSIONS_PATH = @IDE_CODE_LOCAL_EXTENSIONS_PATH@
IDE_WSDIR = @IDE_WSDIR@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LDFLAGS = @LDFLAGS@
LEX = @LEX@
LEXLIB = @LEXLIB@
LEX_OUTPUT_ROOT = @LEX_OUTPUT_ROOT@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LINUX_CFLAGS = @LINUX_CFLAGS@
LINUX_DEF_CONFIG = @LINUX_DEF_CONFIG@
LINUX_DIR = @LINUX_DIR@
LINUX_GIT_BRANCH = @LINUX_GIT_BRANCH@
LINUX_MAKE_PROCESS = @LINUX_MAKE_PROCESS@
LINUX_PACKAGE = @LINUX_PACKAGE@
LINUX_UIMAGE_LOADADDR = @LINUX_UIMAGE_LOADADDR@
LINUX_URL = @LINUX_URL@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MAKE_PROCESS = @MAKE_PROCESS@
MDSPLUS_DIR = @MDSPLUS_DIR@
MDS_LIBSUFFIX = @MDS_LIBSUFFIX@
MDS_SRCDIR = @MDS_SRCDIR@
MKDIR_P = @MKDIR_P@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PAPER_SIZE = @PAPER_SIZE@
PATH_SEPARATOR = @PATH_SEPARATOR@
PERL = @PERL@
PERL_PATH = @PERL_PATH@
SED = @SED@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
SSHPASS = @SSHPASS@
STRIP = @STRIP@
SYSTEM_DTS = @SYSTEM_DTS@
TAR = @TAR@
TOOLCHAIN_DIR = @TOOLCHAIN_DIR@
TOOLCHAIN_TAR = @TOOLCHAIN_TAR@
UNIQ = @UNIQ@
VERBOSE_LEVEL = @VERBOSE_LEVEL@
VERSION = @VERSION@
VIVADO_SDK_SETUP_SCRIPT = @VIVADO_SDK_SETUP_SCRIPT@
VIVADO_SETUP_SCRIPT = @VIVADO_SETUP_SCRIPT@
VIVADO_SOC_PART = @VIVADO_SOC_PART@
VIVADO_VERSION = @VIVADO_VERSION@
WC = @WC@
YACC = @YACC@
YFLAGS = @YFLAGS@
YOCTO_DIR = @YOCTO_DIR@
YOCTO_GIT = @YOCTO_GIT@
YOCTO_TAR = @YOCTO_TAR@
YOCTO_VERSION = @YOCTO_VERSION@
YOCTO_XILINX_GIT = @YOCTO_XILINX_GIT@
YOCTO_XILINX_TAR = @YOCTO_XILINX_TAR@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
kconfig_dir = @kconfig_dir@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
runstatedir = @runstatedir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target = @target@
target_alias = @target_alias@
target_cpu = @target_cpu@
target_os = @target_os@
target_vendor = @target_vendor@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
ak__DOWNLOADS = $(DOWNLOADS) $(am__append_1) ak__cdr-code-server

# VERBOSITY VARIABLE that is usable in Makefile if clause
# See Automake AM_V_P for comparison in bash if clauses
AK_V_IF = $(ak__v_IF_$(V))
ak__v_IF_ = $(ak__v_IF_$(AM_DEFAULT_VERBOSITY))
ak__v_IF_0 = mark 
ak__v_IF_1 = 

# A literal space.
ak__empty := 
ak__space := $(ak__empty) $(ak__empty)

# Joins elements of the list in arg 2 with the given separator.
#   1. Element separator.
#   2. The list.
ak__join_with = $(subst $(ak__space),$1,$(strip $2))
dl__tar_ext = %.tar %.tar.gz %.tar.xz %.tar.bz %.tar.bz2
dl__git_ext = git://% %.git
_fname = $(subst -,_,$(subst ' ',_,$(subst .,_,$1)))
ak__DIRECTORIES = $(DIRECTORIES) $(ATOM_HOME) \
	$(ak__QTCREATOR_SETTINGS_PATH) $(ak__VS_CODE_PATH) \
	$(am__append_2)
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST) $(ak__DIST_COMMON)
ak__DIST_COMMON = \
                  $(top_srcdir)/bootstrap \
				  $(top_srcdir)/conf/update_submodules.sh \
				  $(top_srcdir)/Kconfig \
				  $(wildcard $(patsubst %.ac,%.kconfig,$(filter %.ac,$(am__aclocal_m4_deps))))

@BUILD_CUSTOM_GNUMAKE_TRUE@gnu_make_URL = http://ftp.gnu.org/gnu/make/make-4.1.tar.gz
@BUILD_CUSTOM_GNUMAKE_TRUE@gnu_make_DIR = $(BUILD_CUSTOM_GNUMAKE_DIR)
@BUILD_CUSTOM_GNUMAKE_TRUE@_ = $(BUILD_CUSTOM_GNUMAKE_DIR)/make
@BUILD_CUSTOM_GNUMAKE_TRUE@MAKE = $(BUILD_CUSTOM_GNUMAKE_DIR)/make
edit_DEPS = edit-qtcreator_qws_files
ak__ATOM_PACKAGES = $(ATOM_PACKAGES) project-manager atom-ide-ui \
	ide-python teletype refactor autocomplete-clang goto build \
	build-make
ATOM_PACKAGES_PATH = $(addprefix $(ATOM_HOME)/packages/,$(ak__ATOM_PACKAGES))

# ////////////////////////////////////////////////////////////////////////////////
# //  QTCREATOR  /////////////////////////////////////////////////////////////////
# ////////////////////////////////////////////////////////////////////////////////
ak__QTCREATOR_SETTINGS_PATH = $(or $(QTCREATOR_SETTINGS_PATH),$(abs_top_builddir)/conf/ide)

# ////////////////////////////////////////////////////////////////////////////////
# //  VS CODE  ///////////////////////////////////////////////////////////////////
# ////////////////////////////////////////////////////////////////////////////////
ak__VS_CODE_PATH = $(or $(VS_CODE_PATH),$(abs_top_builddir)/conf/ide/vs_code)
ak__VS_CODE_ARGS = $(VS_CODE_ARGS)
ak__VS_CODE_PROJECT_PATH = $(or $(VS_CODE_PROJECT_PATH),$(top_srcdir))
ak__VS_CODE_EXTENSIONS = ms-vscode.cpptools \
							ms-python.python \
							maelvalais.autoconf \
							$(VS_CODE_EXTENSIONS)

@IDE_CODE_LOCAL_EXTENSIONS_TRUE@ak__VS_CODE_EXTENSIONS_PATH = --extensions-dir=$(IDE_CODE_LOCAL_EXTENSIONS_PATH)

# ////////////////////////////////////////////////////////////////////////////////
# //  CDR CODE SERVER  ///////////////////////////////////////////////////////////
# ////////////////////////////////////////////////////////////////////////////////
ak__CODE_SERVER_HOST = $(or $(CODE_SERVER_HOST),0.0.0.0)
ak__CODE_SERVER_PORT = $(or $(CODE_SERVER_PORT),8080)
ak__CODE_SERVER_AUTH = $(or $(CODE_SEVER_AUTH),none)
ak__CODE_SERVER_URL = $(or $(CODE_SERVER_URL),https://github.com/cdr/code-server/releases/download/3.4.1/code-server-3.4.1-linux-x86_64.tar.gz)
ak__cdr_code_server_URL = $(ak__CODE_SERVER_URL)
ak__cdr_code_server_DIR = $(top_builddir)/conf/ide/code-server
ARCH = arm
# TOOLCHAIN_DIR           ?= ${abs_top_builddir}/toolchain
TOOLCHAIN_PATH = ${TOOLCHAIN_DIR}/bin

# NODOCKERBUILD += Makefile $(srcdir)/Makefile.in $(srcdir)/Makefile.am $(top_srcdir)/configure.ac $(ACLOCAL_M4) $(top_srcdir)/configure am--refresh \
#                    $(am__aclocal_m4_deps) $(am__configure_deps) $(top_srcdir)/%.mk \
#					docker-%
NODOCKERBUILD = help reconfigure am__configure_deps \
	${ak__DOCKER_TARGETS} ${DOCKER_MACHINES} portainer-init \
	docker-registry-init list
ak__DOCKER_TARGETS = $(DOCKER_TARGETS)
DSHELL = $(top_srcdir)/conf/dk.sh ${DSHELL_ARGS}
NO_DOCKER_TARGETS = Makefile $(srcdir)/Makefile.in $(srcdir)/Makefile.am $(top_srcdir)/configure.ac $(ACLOCAL_M4) $(top_srcdir)/configure am--refresh \
                    $(am__aclocal_m4_deps) $(am__configure_deps) $(top_srcdir)/%.mk \
					docker-%

kscripts = $(top_srcdir)/conf/kscripts
@LINUX_DIR_IN_SRCTREE_FALSE@LINUX_SRCDIR = $(abs_top_builddir)/$(LINUX_DIR)
@LINUX_DIR_IN_SRCTREE_TRUE@LINUX_SRCDIR = $(abs_top_srcdir)/$(LINUX_DIR)
@LINUX_DIR_IN_SRCTREE_FALSE@LINUX_BUILDDIR = $(abs_top_builddir)/$(LINUX_DIR)
@LINUX_DIR_IN_SRCTREE_TRUE@LINUX_BUILDDIR = $(abs_top_builddir)/$(LINUX_DIR)
@LINUX_DIR_IN_SRCTREE_TRUE@LINUX_BUILD_O = $(filter-out $(LINUX_SRCDIR),$(LINUX_BUILDDIR))
mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))
current_dir := $(notdir $(patsubst %/,%,$(dir $(mkfile_path))))
project_LISTS = vivado_CORES \
				vivado_PROJECTS

project_VARIABLES = SOURCES \
					IP_SOURCES \
					BD_SOURCES \
					PRJCFG \
					IPCFG \
					BOARD_PART \
					BOARD_PRESET \
					COMPILE_ORDER \
					DRV_LINUX \
					BSPDIR \
					ARCHIVE

project_DEFAULT := $(lastword $(patsubst _, ,$(current_dir)))
vivado_PROJECTS_TARGETS = project write_project write_bitstream \
						  new_project open_project bitstream clean_project \
						  dts dtb bsp

vivado_CORES_TARGETS = core new_ip edit_ip clean_ip
FULL_NAME = $(if $(VENDOR),$(VENDOR)_)$(NAME)_$(VERSION)
ALL_NAMES = $(NAME) $(VENDOR)_$(NAME) $(NAME)_$(VERSION) $(FULL_NAME)

# Vivado from Xilinx provides IP handling, FPGA compilation hsi (hardware
# software interface) provides software integration both tools are run in batch
# mode with an option to save journal files
VIVADO = vivado -nolog -journal $(NAME)_jou.tcl      -mode batch
VIVADO_SHELL = vivado -nolog -journal vivado_shell_jou.tcl $(if $(MODE),-mode $(MODE))
HSI = hsi    -nolog -journal $(NAME)_hsi_jou.tcl  -mode batch
HSI_SHELL = hsi    -nolog -journal hsi_shell_jou.tcl    $(if $(MODE),-mode $(MODE))
HLS = vivado_hls -nosplash
HLS_SHELL = vivado_hls -nosplash
XSDK = xsdk
XSDK_SHELL = xsdk -batch
SDK_SHELL = xsdk
vivado = ${_envset}; $(VIVADO)       -source $(FPGA_DIR)/vivado_make.tcl $(if $1,-tclargs $1)
vivado_shell = ${_envset}; $(VIVADO_SHELL) -source $(FPGA_DIR)/vivado_make.tcl $(if $1,-tclargs $1)
hsi = ${_envset}; $(HSI)       -source $(FPGA_DIR)/vivado_make.tcl $(if $1,-tclargs $1)
hsi_shell = ${_envset}; $(HSI_SHELL) -source $(FPGA_DIR)/vivado_make.tcl $(if $1,-tclargs $1)
hls = ${_envset}; $(HLS)       -f $(FPGA_DIR)/make_vivado_hls.tcl
hls_shell = ${_envset}; $(HLS_SHELL)
xsdk = ${_envset}; $(XSDK)       $1
xsdk_shell = ${_envset}; $(XSDK_SHELL) $1
sdk_shell = ${_envset}; $(SDK_SHELL)
FPGA_DIR = $(abs_top_srcdir)/fpga
FPGA_REPO_DIR = $(abs_top_srcdir)/fpga/ip_repo
FPGA_BIT = $(VIVADO_BITDIR)/$(FULL_NAME).bit
FSBL_ELF = $(VIVADO_SDKDIR)/fsbl/executable.elf
DTS = $(VIVADO_SDKDIR)/dts/devicetree.dts
DTB = $(VIVADO_SDKDIR)/dts/devicetree.dtb
check_sources = $(SOURCES) \
				$(BD_SOURCES) \
				| $(filter-out $(ALL_NAMES),$(IP_SOURCES))

check_ip_componenents = $(foreach x,$(filter-out $(ALL_NAMES),$(IP_SOURCES)),$(VIVADO_IPDIR)/$x/component.xml)
check_prj_sources = $(shell $(FIND) $(VIVADO_SRCDIR)/$(FULL_NAME).{srcs,tcl} -printf "%p " 2>/dev/null || echo "") \
					$(shell $(FIND) $(VIVADO_PRJDIR)/$(FULL_NAME).srcs -printf "%p " 2>/dev/null || echo "")

OUTDIR = $(builddir)/vivado
CORES = axi_axis_reader_v1_0 axi_axis_writer_v1_0 axi_bram_reader_v1_0 \
  axi_bram_writer_v1_0 axi_cfg_register_v1_0 axis_accumulator_v1_0 \
  axis_alex_v1_0 axis_averager_v1_0 axis_bram_reader_v1_0 \
  axis_bram_writer_v1_0 axis_constant_v1_0 axis_counter_v1_0 \
  axis_decimator_v1_0 axis_fifo_v1_0 axis_gpio_reader_v1_0 axis_histogram_v1_0 \
  axis_i2s_v1_0 axis_interpolator_v1_0 axis_keyer_v1_0 axis_lfsr_v1_0 \
  axis_oscilloscope_v1_0 axis_packetizer_v1_0 axis_phase_generator_v1_0 \
  axis_pulse_height_analyzer_v1_0 axis_ram_writer_v1_0 \
  axis_red_pitaya_adc_v2_0 axis_red_pitaya_dac_v1_0 axis_stepper_v1_0 \
  axis_tagger_v1_0 axis_timer_v1_0 axis_trigger_v1_0 axi_sts_register_v1_0 \
  axis_validator_v1_0 axis_variable_v1_0 axis_variant_v1_0 axis_zeroer_v1_0 \
  dna_reader_v1_0 gpio_debouncer_v1_0 pulse_generator_v1_0

all: all-am

.SUFFIXES:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/Common.mk $(top_srcdir)/conf/kscripts/build_common.mk $(top_srcdir)/conf/kscripts/toolchain.mk $(top_srcdir)/conf/kscripts/docker.mk $(top_srcdir)/fpga/Common.mk $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign fpga/lib/red-pitaya-notes/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign fpga/lib/red-pitaya-notes/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles);; \
	esac;
$(top_srcdir)/Common.mk $(top_srcdir)/conf/kscripts/build_common.mk $(top_srcdir)/conf/kscripts/toolchain.mk $(top_srcdir)/conf/kscripts/docker.mk $(top_srcdir)/fpga/Common.mk $(am__empty):

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
tags TAGS:

ctags CTAGS:

cscope cscopelist:

distdir: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) distdir-am

distdir-am: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean-am: clean-generic clean-local mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-generic

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: install-am install-strip

.PHONY: all all-am check check-am clean clean-generic clean-local \
	cscopelist-am ctags-am distclean distclean-generic distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-generic pdf \
	pdf-am ps ps-am tags-am uninstall uninstall-am

.PRECIOUS: Makefile


MAKE_PROCESS  ?= $(shell grep -c ^processor /proc/cpuinfo)
DOWNLOAD_DIR  ?= $(top_builddir)/downloads
DOWNLOADS     ?= $(ak__DOWNLOADS)

# PERL ENV SUBST
# --------------
# This can be used to make a sh substitution template by calling $(call __ax_pl_envsubst, template, target)
#
# __ax_pl_envsubst ?= $(PERL) -pe 's/([^\\]|^)\$$\{([a-zA-Z_][a-zA-Z_0-9]*)\}/$$1.$$ENV{$$2}/eg' < $1 > $2
__ax_pl_envsubst  ?= $(PERL) -pe 's/([^\\]|^)\$$\{([a-zA-Z_][a-zA-Z_0-9]*)\}/$$1.$$ENV{$$2}/eg;s/\\\$$/\$$/g;' < $1 > $2
__ax_pl_envsubst2 ?= $(PERL) -pe 's/([^\\]|^)\$$\(([a-zA-Z_][a-zA-Z_0-9]*)\)/$$1.$$ENV{$$2}/eg;s/\\\$$/\$$/g;' < $1 > $2

# $(ak__ENVPARSEFILES):
# 	@ $(call __ax_pl_envsubst2,$<,$@);

# FILTER ALL REPETITIONS IN A LIST
# --------------------------------
ak__uniq ?= $(if $1,$(firstword $1) $(call ak__uniq,$(filter-out $(firstword $1),$1)))

# FLAT NAME SUBST
# ---------------
ak__flt ?= $(subst -,_,$(subst ' ',_,$(subst .,_,$1)))

define dl__download_tar
 $(info "Downloading tar file: $1") \
 $(MKDIR_P) ${DOWNLOAD_DIR} $2; \
 _tar=${DOWNLOAD_DIR}/$$(echo $1 | sed -e 's|.*/||'); \
 test -f $$_tar || curl -SL $1 > $$_tar; \
 _wcl=$$(tar -tf $$_tar | sed -e 's|/.*||' | uniq | wc -l); \
 if test $$_wcl = 1; then \
  tar -xf $$_tar -C $2 --strip 1; \
 else \
  tar -xf $$_tar -C $2; \
 fi
endef

define dl__download_git
 $(info "Downloading git repo: $1") \
 git clone $1 $2 $(if $3,-b $3)
endef

define dl__download_generic
 $(info "Downloading file: $1") \
 $(MKDIR_P) ${DOWNLOAD_DIR}; \
 _f=${DOWNLOAD_DIR}/$$(echo $1 | sed -e 's|.*/||'); \
 test -f $$_f || curl -SL $1 > $$_f; \
 $(LN_S) $$_f $2;
endef

define dl__dir =
$(if $(${_fname}_DIR),
$(${_fname}_DIR): $$(${_fname}_DEPS)
	@ $(MAKE) $(AM_MAKEFLAGS) download NAME=$1 DOWNLOAD_DIR=$(DOWNLOAD_DIR)
)
endef
$(foreach x,$(ak__DOWNLOADS),$(eval $(call dl__dir,$x)))

# $(ak__DOWNLOADS): _flt = $(subst -,_,$(subst ' ',_,$(subst .,_,$1)))
$(ak__DOWNLOADS): 
	@ $(MAKE) $(AM_MAKEFLAGS) download NAME=$@ DOWNLOAD_DIR=$(DOWNLOAD_DIR)

.PHONY: download
download: ##@@miscellaneous download target in $NAME and $DOWNLOAD_URL
download: FNAME   = $(subst -,_,$(subst ' ',_,$(subst .,_,$(NAME))))
download: URL     = $(or $($(FNAME)_URL),$(DOWNLOAD_URL))
download: DIR     = $(or $($(FNAME)_DIR),$(NAME))
download: BRANCH  = $(or $($(FNAME)_BRANCH),$(BRANCH))
download: $(or $($(FNAME)_DEPS), $(DOWNLOAD_DEPS))
	@ $(foreach x,$(URL), $(info DOWNLOAD_DIR = $(DOWNLOAD_DIR))\
		$(info Download: $x to $(DIR)) \
		$(if $(filter $(dl__tar_ext),$x),$(call dl__download_tar,$x,$(DIR)), \
		$(if $(filter $(dl__git_ext),$x),$(call dl__download_git,$x,$(DIR),$(BRANCH)), \
		$(call dl__download_generic,$x,$(DIR)) ) ) \
	   )
$(ak__DIRECTORIES):
	@ $(info buildinf dir for: $@) $(MKDIR_P) $@

#  USAGE: to install name as a whole directory add the following target:
#
#  install-<name>DATA:
# 	 @ $(MAKE) ak__$@
#
ak__install-%DATA:
	@$(NORMAL_INSTALL)
	@list='$($*_DATA)'; test -n "$($*dir)" || list=; \
	 if test -n "$$list"; then \
	   echo " $(MKDIR_P) '$(DESTDIR)$($*dir)'"; \
	   $(MKDIR_P) "$(DESTDIR)$($*dir)" || exit 1; \
	 fi; \
	 for p in $$list; do \
	   if test -f "$$p"; then echo "$$p"; \
	   else p="$(srcdir)/$$p"; \
	    if test -f "$$p"; then echo "$$p"; fi; \
	   fi; \
	 done | $(am__base_list) | \
	 while read files; do \
	   echo " $(INSTALL_DATA) $$files '$(DESTDIR)$($*dir)'"; \
	   $(INSTALL_DATA) $$files "$(DESTDIR)$($*dir)" || exit $$?; \
	 done; \
	 for p in $$list; do \
	   if test -d "$$p"; then echo "$$p"; \
	   else p="$(srcdir)/$$p"; \
	    if test -d "$$p"; then echo "$$p"; fi; \
	   fi; \
	 done | $(am__base_list) | \
	 while read drs; do \
	 	echo "copy directory: $$drs to $(DESTDIR)$($*dir)"; \
	 	cp -au $$drs "$(DESTDIR)$($*dir)"; \
	 done

@BUILD_CUSTOM_GNUMAKE_TRUE@$(BUILD_CUSTOM_GNUMAKE_DIR)/Makefile: | gnu-make
@BUILD_CUSTOM_GNUMAKE_TRUE@	@ cd $(dir $@) && ./configure

@BUILD_CUSTOM_GNUMAKE_TRUE@$(BUILD_CUSTOM_GNUMAKE_DIR)/make: MAKE = make
@BUILD_CUSTOM_GNUMAKE_TRUE@$(BUILD_CUSTOM_GNUMAKE_DIR)/make: $(BUILD_CUSTOM_GNUMAKE_DIR)/Makefile
@BUILD_CUSTOM_GNUMAKE_TRUE@	@ make -C $(dir $@) all

@IDESUPPORT_TRUE@IDE ?= code
@IDESUPPORT_TRUE@edit: ##@miscellaneous start editor define in $IDE
@IDESUPPORT_TRUE@edit: $(edit_DEPS) edit-$(IDE)

# ////////////////////////////////////////////////////////////////////////////////
# //  ATOM  //////////////////////////////////////////////////////////////////////
# ////////////////////////////////////////////////////////////////////////////////

ATOM_HOME         ?= $(abs_top_builddir)/conf/ide/atom
ATOM_PROJECT_PATH ?= $(top_srcdir) $(builddir)

#ak__PYTHON_PACKAGES += setuptools python-language-server[all]

export ATOM_HOME
$(ATOM_PACKAGES_PATH):
	@ apm install $(notdir $@)

apm-list: ##@@atom apm list packages in $ATOM_HOME
apm-%: | $(ATOM_HOME)
	@ apm $*

apm-install: ##@@atom apm install packages in $ATOM_HOME
apm-install: $(ATOM_PACKAGES_PATH)
edit-atom: ##@@ide start atom
edit-atom: | apm-install
	@ atom $(foreach d,$(ATOM_PROJECT_PATH),-a $d )

# ////////////////////////////////////////////////////////////////////////////////
# //  EMACS  /////////////////////////////////////////////////////////////////////
# ////////////////////////////////////////////////////////////////////////////////

edit-emacs: ##@@ide start emacs
edit-emacs:
	@ emacs $(srcdir)
QTCREATOR_THEME ?= dark
QTCREATOR_COLOR ?= Inkpot
edit-qtcreator: ##@@ide start qtcreator
edit-qtcreator: | $(ak__QTCREATOR_SETTINGS_PATH)
	@ qtcreator -settingspath $(ak__QTCREATOR_SETTINGS_PATH) \
					-theme $(QTCREATOR_THEME) -color $(QTCREATOR_COLOR)

# ////////////////////////////////////////////////////////////////////////////////
# //  QWS  ///////////////////////////////////////////////////////////////////////
# ////////////////////////////////////////////////////////////////////////////////
#
%.qws: %.template.qws
	 @ $(call __ax_pl_envsubst,$<,$@);

edit-qtcreator_qws_files: QWS_FILES_TEMPLATES = $(shell find $(top_srcdir)/conf/ide/QtProject/qtcreator/ -name '*.qws.template' 3>/dev/null)
edit-qtcreator_qws_files: QWS_FILES = $(QWS_FILES_TEMPLATES:.qws.template=.qws)
edit-qtcreator_qws_files: abs_top_srcdir := $(abs_top_srcdir)
edit-qtcreator_qws_files: $(QWS_FILES)

@IDE_CODE_LOCAL_TRUE@edit-code: ##@@ide start visual studio code editor
@IDE_CODE_LOCAL_TRUE@edit-code: ##@@vs_code start visual studio code editor
@IDE_CODE_LOCAL_TRUE@edit-code-ext: ##@@vs_code list visual studio extensions
@IDE_CODE_LOCAL_TRUE@edit-code-extinstall: ##@@vs_code install all visual studio extensions in $IDE_CODE_EXTENSIONS
@IDE_CODE_LOCAL_TRUE@$(IDE_CODE_LOCAL_DIR)/bin/code: | $(DOWNLOAD_DIR) $(IDE_CODE_LOCAL_DIR) 
@IDE_CODE_LOCAL_TRUE@	- curl -SL $(IDE_CODE_DOWNLOAD_URL) > $(DOWNLOAD_DIR)/vs_code_local.tar.gz; \
@IDE_CODE_LOCAL_TRUE@	$(call dl__download_tar,$(DOWNLOAD_DIR)/vs_code_local.tar.gz,$(IDE_CODE_LOCAL_DIR)); \
@IDE_CODE_LOCAL_TRUE@	[ -f $@          ] && patch $@ < $(kconfig_dir)/patch/vs_code_libxcb.patch; \
@IDE_CODE_LOCAL_TRUE@	[ -f $@-insiders ] && patch $@-insiders < $(kconfig_dir)/patch/vs_code_insiders_libxcb.patch; \
@IDE_CODE_LOCAL_TRUE@	[ -f $@-insiders ] && ln -s $@-insiders $@; 

@IDE_CODE_LOCAL_TRUE@edit-code: $(IDE_CODE_LOCAL_DIR)/bin/code
@IDE_CODE_LOCAL_TRUE@	$(IDE_CODE_LOCAL_DIR)/bin/code \
@IDE_CODE_LOCAL_TRUE@	 -n $(ak__VS_CODE_PROJECT_PATH)  --user-data-dir $(ak__VS_CODE_PATH) \
@IDE_CODE_LOCAL_TRUE@	 $(ak__VS_CODE_EXTENSIONS_PATH) $(ak__VS_CODE_ARGS) 

@IDE_CODE_LOCAL_TRUE@edit-code-ext: $(IDE_CODE_LOCAL_DIR)/bin/code
@IDE_CODE_LOCAL_TRUE@	@ $(IDE_CODE_LOCAL_DIR)/bin/code --user-data-dir $(ak__VS_CODE_PATH) \
@IDE_CODE_LOCAL_TRUE@	  $(ak__VS_CODE_EXTENSIONS_PATH) $(ak__VS_CODE_ARGS) --list-extensions

@IDE_CODE_LOCAL_TRUE@edit-code-extinstall: $(IDE_CODE_LOCAL_DIR)/bin/code
@IDE_CODE_LOCAL_TRUE@	@ $(foreach x,$(ak__VS_CODE_EXTENSIONS),$(IDE_CODE_LOCAL_DIR)/bin/code \
@IDE_CODE_LOCAL_TRUE@	  --user-data-dir $(ak__VS_CODE_PATH) $(ak__VS_CODE_ARGS) \
@IDE_CODE_LOCAL_TRUE@	  $(ak__VS_CODE_EXTENSIONS_PATH) --install-extension $x;)

@IDE_CODE_LOCAL_FALSE@edit-code: ##@@ide start visual studio code editor
@IDE_CODE_LOCAL_FALSE@edit-code: ##@@vs_code start visual studio code editor
@IDE_CODE_LOCAL_FALSE@edit-code-ext: ##@@vs_code list visual studio extensions
@IDE_CODE_LOCAL_FALSE@edit-code-extinstall: ##@@vs_code install all visual studio extensions in $IDE_CODE_EXTENSIONS
@IDE_CODE_LOCAL_FALSE@edit-code: | $(ak__VS_CODE_PATH)
@IDE_CODE_LOCAL_FALSE@	@ code -n $(ak__VS_CODE_PROJECT_PATH)  --user-data-dir $(ak__VS_CODE_PATH) \
@IDE_CODE_LOCAL_FALSE@	 $(ak__VS_CODE_EXTENSIONS_PATH) $(ak__VS_CODE_EXTENSIONS_PATH) $(ak__VS_CODE_ARGS) \
@IDE_CODE_LOCAL_FALSE@	 --enable-proposed-api ms-vscode-remote.remote-ssh

@IDE_CODE_LOCAL_FALSE@edit-code-ext:
@IDE_CODE_LOCAL_FALSE@	@ code --user-data-dir $(ak__VS_CODE_PATH) $(ak__VS_CODE_EXTENSIONS_PATH) \
@IDE_CODE_LOCAL_FALSE@	 $(ak__VS_CODE_ARGS) --list-extensions

@IDE_CODE_LOCAL_FALSE@edit-code-extinstall:
@IDE_CODE_LOCAL_FALSE@	@ $(foreach x,$(ak__VS_CODE_EXTENSIONS),code --user-data-dir $(ak__VS_CODE_PATH) \
@IDE_CODE_LOCAL_FALSE@	 $(ak__VS_CODE_EXTENSIONS_PATH) $(ak__VS_CODE_ARGS) --install-extension $x;)
ak__cdr-code-server: 

edit-code-server: ##@@ide start cdr vs code server installed in conf/code-server
edit-code-server: ak__cdr-code-server
	$(ak__cdr_code_server_DIR)/code-server --host $(ak__CODE_SERVER_HOST) --port $(ak__CODE_SERVER_PORT) --auth $(ak__CODE_SERVER_AUTH) \
	--user-data-dir $(ak__VS_CODE_PATH) $(ak__VS_CODE_EXTENSIONS_PATH) $(top_srcdir)

# /////////////////////////////////////////////////////////////////////////////
# // RECONFIGURE  /////////////////////////////////////////////////////////////
# /////////////////////////////////////////////////////////////////////////////

.PHONY: reconfigure
reconfigure: ##@miscellaneous re-run configure with last passed arguments
	@ \
	$(info \n\n -- Reconfiguring build directory: -----------") \
	cd '$(abs_top_builddir)' && ./config.status --recheck

shell: ##@miscellaneous start a $(SHELL) using make context
shell:
	$(SHELL)

print-env-: ##@@miscellaneous print-env-% print env variable
print-env-%:
	@ $(if $($*),$(info $*="$($*)"),$(info $* not set)):;

# /////////////////////////////////////////////////////////////////////////////
# //  TOOLCHAIN  //////////////////////////////////////////////////////////////
# /////////////////////////////////////////////////////////////////////////////
#
TOOLCHAIN_DIR ?= $(top_builddir)/toolchain
@TOOLCHAIN_RETRIEVE_TAR_TRUE@$(top_builddir)/toolchain:
@TOOLCHAIN_RETRIEVE_TAR_TRUE@	@ \
@TOOLCHAIN_RETRIEVE_TAR_TRUE@	  mkdir -p ${DL} $@; \
@TOOLCHAIN_RETRIEVE_TAR_TRUE@	  echo "getting toolchain from tar: ${TOOLCHAIN_TAR}"; \
@TOOLCHAIN_RETRIEVE_TAR_TRUE@	  _tar=${DL}/$$(echo $(TOOLCHAIN_TAR) | sed -e 's|.*/||'); \
@TOOLCHAIN_RETRIEVE_TAR_TRUE@	  test -f $$_tar || curl -SL $(TOOLCHAIN_TAR) > $$_tar; \
@TOOLCHAIN_RETRIEVE_TAR_TRUE@	  _wcl=$$(tar -tJf $$_tar | sed -e 's|/.*||' | uniq | wc -l); \
@TOOLCHAIN_RETRIEVE_TAR_TRUE@	  if test $$_wcl = 1; then \
@TOOLCHAIN_RETRIEVE_TAR_TRUE@	  tar -xJf $$_tar -C $@ --strip 1; \
@TOOLCHAIN_RETRIEVE_TAR_TRUE@	  else \
@TOOLCHAIN_RETRIEVE_TAR_TRUE@	  tar -xJf $$_tar -C $@; \
@TOOLCHAIN_RETRIEVE_TAR_TRUE@	  fi
@TOOLCHAIN_RETRIEVE_TAR_FALSE@$(top_builddir)/toolchain:

export PATH := ${TOOLCHAIN_PATH}:${PATH}

$(CROSS_TARGETS): export CC:=$(CROSS_COMPILE)$(CC)
$(CROSS_TARGETS): export CXX:=$(CROSS_COMPILE)$(CXX)
$(CROSS_TARGETS): export AR:=$(CROSS_COMPILE)$(AR)
$(CROSS_TARGETS): export AS:=$(CROSS_COMPILE)$(AS)

# docker build targets
@AX_DOCKER_BUILD_TARGETS@

export DOCKER_NETWORKS   ?= bridge
export DOCKER_PS1

# Disable shared memory for QT exported display
export QT_X11_NO_MITSHM = 1

export srcdir
export builddir
export top_srcdir
export top_builddir
export abs_top_srcdir
export abs_top_builddir

export DOCKER_CONTAINER
export DOCKER_IMAGE
export DOCKER_URL
export DOCKER_DOCKERFILE
export DOCKER_SHARES
export DOCKER_MOUNTS
export DOCKER_PORTS
export DOCKER_NETWORKS
export DOCKER_DEVICES
export DOCKER_SHELL = /bin/sh
export DOCKER_REGISTRY
export DOCKER_ENTRYPOINT
# DSHELL_ARGS = -v

@ENABLE_DOCKER_TARGETS_TRUE@$(ak__DOCKER_TARGETS): override SHELL = $(DSHELL)
@ENABLE_DOCKER_TARGETS_TRUE@$(NO_DOCKER_TARGETS):  override SHELL = /bin/sh
@ENABLE_DOCKER_TARGETS_TRUE@$(NO_DOCKER_TARGETS):  override HAVE_DOCKER = no

docker-clean: ##@@docker_target clean docker container conf in .docker directory
docker-start: ##@@docker_target start advanced per target docker container
docker-stop:  ##@@docker_target stop advanced per target docker container
docker-:      ##@@docker_target advanced per target docker (any command passed to conf/dk.sh)
docker-%:
	@ $(info [docker] $*)
	@ . $(DSHELL) $*

export DOCKER_MACHINE
export DOCKER_MACHINE_ISO
export DOCKER_MACHINE_ARGS
export DOCKER_MACHINE_SORAGE_PATH ?= $(abs_top_builddir)/conf/.docker

$(DOCKER_MACHINES):
	@ $(MAKE) machine-create DOCKER_MACHINE=$@

docker-machine-%: DOCKER_CONTAINER = none
docker-machine-%: DOCKER_MACHINE_ARGS := $(or $($(DOCKER_MACHINE)_ARGS),$(DOCKER_MACHINE_ARGS))
docker-machine-%: DOCKER_MACHINE_ISO  := $(or $($(DOCKER_MACHINE)_ISO),$(DOCKER_MACHINE_ISO))
docker-machine-%: 
	$(DSHELL) machine_$*

portainer-init: ##@@docker_services poirtainer init (browse localhost:9000 then)
portainer-init: DOCKER_PORTAINER_PORT := $(or $(DOCKER_PORTAINER_PORT),9000)
portainer-init:
	@ docker volume create portainer_data; \
      docker run -d -p $(DOCKER_PORTAINER_PORT):9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer

docker-registry-init: ##@@docker_services registry init (provide an image registry at localhost:5000)
docker-registry-init: DOCKER_REGISTRY_PORT := $(or $(DOCKER_REGISTRY_PORT),5000)
docker-registry-init:
	@ docker service create --name registry --publish $(DOCKER_REGISTRY_PORT):5000 registry:2

@TARGET_SELFHELP@

help: print_banner
print_banner:
	@ cat $(top_srcdir)/doc/logo.txt

DL   ?= $(DOWNLOAD_DIR)
TMP  ?= $(abs_top_builddir)

${DL} ${TMP}:
	@$(MKDIR_P) $@

locale-gen: USER = root
locale-gen:
	@ locale-gen $${LANG}

$(top_srcdir)/configure.ac: $(foreach x,$(CONFIG_SUBDIRS), $(top_srcdir)/$x/configure.ac)
	@ touch $@

.PHONY: reconfigure
reconfigure: ##@miscellaneous re-run configure with last passed arguments
	@ \
	echo " -- Reconfiguring build with following parameters: -----------"; \
	echo $(shell $(abs_top_builddir)/config.status --config);              \
	echo " -------------------------------------------------------------"; \
	echo ; \
	cd '$(abs_top_builddir)' && \
	$(abs_top_srcdir)/configure $(shell $(abs_top_builddir)/config.status --config);

LINUX_CFLAGS    ?= "-O2 -mtune=cortex-a9 -mfpu=neon -mfloat-abi=hard"
LINUX_PACKAGE   ?= uImage
LINUX_IMAGE     ?= $(TMP)/$(LINUX_PACKAGE)
LINUX_DIR       ?= linux
WITH_TOOLCHAIN_DIR      ?= ${abs_top_builddir}/toolchain
TOOLCHAIN_PATH          ?= ${WITH_TOOLCHAIN_DIR}/bin
CROSS_COMPILE           ?= arm-linux-gnueabihf-

define _set_export
export ARCH=$(ARCH); \
export CROSS_COMPILE=${CROSS_COMPILE}; \
export PATH=$${PATH}:$(TOOLCHAIN_PATH); \
export O=${LINUX_BUILD_O}
endef

@PROJECT_VARIABLES@

define _envset
 . $(VIVADO_SETUP_SCRIPT); \
 . $(VIVADO_SDK_SETUP_SCRIPT)
endef
DTREE_DIR      ?= $(abs_top_builddir)/fpga/device-tree-xlnx-${VIVADO_VERSION}
VIVADO_VERSION ?= 2015.4
maxThreads     ?= 6
COMPILE_ORDER  ?= auto

VIVADO_SRCDIR ?= $(srcdir)/prj/$(BOARD)
VIVADO_PRJDIR ?= $(builddir)/edit/$(BOARD)
VIVADO_BITDIR ?= $(builddir)/edit/$(BOARD)/$(FULL_NAME).bit
VIVADO_SDKDIR ?= $(builddir)/edit/$(BOARD)/$(FULL_NAME).sdk
VIVADO_IPDIR  ?= $(builddir)/ip/vivado

export XILINX_TCLAPP_REPO = $(abs_top_builddir)/fpga/tclapp
export XILINX_LOCAL_USER_DATA = NO

export srcdir \
	   top_srcdir \
	   builddir \
	   top_builddir \
	   maxThreads

export FPGA_DIR \
	   FPGA_BIT \
	   DTREE_DIR \
	   VIVADO_VERSION \
	   VIVADO_SOC_PART \
	   FPGA_REPO_DIR \
	   COMPILE_ORDER

export NAME \
	   BOARD \
	   BOARD_PART \
	   BOARD_PRESET \
	   VENDOR \
	   LIBRARY \
	   VERSION \
	   SOURCES \
	   BD_SOURCES \
	   IP_SOURCES \
	   PRJCFG \
	   IPCFG \
	   DRV_LINUX \
	   BSPDIR \
	   ARCHIVE

export VIVADO_SRCDIR \
	   VIVADO_PRJDIR \
	   VIVADO_BITDIR \
	   VIVADO_SDKDIR \
	   VIVADO_IPDIR

# all: ## all steps for current project toward bitstream (bit) and device_tree (dtb)
# all-local: dtb

projects:      ##@projects build all projects defined in vivado_PROJECTS variable
cores:         ##@cores build all cores defined in vivado_CORES variable

project: $(VIVADO_PRJDIR)/$(FULL_NAME).xpr
projects: $(vivado_PROJECTS)

$(vivado_PROJECTS):
	@ $(MAKE) project NAME=$@

#$(VIVADO_SRCDIR)/%: $(VIVADO_PRJDIR)/% $(check_sources)
#	@ $(call vivado, write_project)

$(VIVADO_PRJDIR)/%.xpr: $(check_ip_componenents) $(check_sources)
	@ $(call vivado, open_project)

core:
	$(MAKE) $(VIVADO_IPDIR)/$(FULL_NAME)/component.xml BOARD="vivado"

cores: $(vivado_CORES)

$(vivado_CORES):
	@ $(MAKE) core NAME=$@

$(filter-out $(vivado_CORES),$(IP_SOURCES)):
	@ $(MAKE) -C $(@D) $(@F)

$(VIVADO_IPDIR)/%/component.xml: $(check_sources)
	@ $(if $(filter %.cpp,${SOURCES}),\
		   $(call hls, package_hls_ip),\
		   $(call vivado, package_ip))

list: ##@projects list all projects defined in vivado_PROJECTS variable
list: ##@cores list all projects defined in vivado_PROJECTS variable
list : _item = $(foreach x,$($1),$(info |  - $x))
list: print_banner
	@ \
	$(info ,-----------------------------------------------------------------) \
	$(info | projects and cores defined ) \
	$(info |) \
	$(info | CORES: ) \
	$(call _item,vivado_CORES) \
	$(info |) \
	$(info | PROJECTS: ) \
	$(call _item,vivado_PROJECTS) \
	$(info |) \
	$(info | CURRENT: $(NAME)) \
	$(info |) \
	$(info `-----------------------------------------------------------------) :

.PHONY: vivado_shell hsi_shell xsdk_shell
vivado_shell:##@xilinx open a vivado shell with configured env
hsi_shell:   ##@xilinx open hsi shell with configured env
hls_shell:   ##@xilinx open hls shell with configured env
xsdk_shell:  ##@xilinx open xsdk shell with configured env
sdk_shell:   ##@xilinx open sdk shell with configured env

vivado vivado_shell hsi hsi_shell hls hls_shell xsdk_shell sdk_shell:
	@ $(call $@,${TCL_ARGS})

new_project:   print_banner ##@projects Create a new vivado project
open_project:  print_banner ##@projects Open the current project
write_project: print_banner ##@projects Store the current project
bitstream:     print_banner ##@projects generate bitstream

package_ip:   ##@cores create a new pheripheral project for edit.
edit_ip:  ##@cores open project ip or edit existing project as a new ip.

new_project write_project write_bitstream package_ip: $(check_sources)
	@ $(call vivado,$@)

.PHONY: open_project edit_ip
open_project: $(check_sources)
	@ $(call vivado_shell,$@)

edit_ip: $(check_sources)
	@ $(if $(filter %.cpp,${SOURCES}),\
		   ${_envset}; $(HLS) -p $(VIVADO_PRJDIR)/$(FULL_NAME),\
		   $(call vivado_shell,$@))

bitstream: $(FPGA_BIT)

$(FPGA_BIT): $(check_prj_sources) $(check_ip_componenents) $(check_sources)
	$(MAKE) write_bitstream

.PHONY: fsbl
fsbl: $(FSBL_ELF)

$(FSBL_ELF): $(FPGA_BIT)
	@ $(call hsi,write_fsbl)

.PHONY: dts dtb
dts: ##@hsi compile device tree source file
	$(MAKE) $(DTS)
dtb: ##@hsi compile device tree binary
	$(MAKE) $(DTB)

$(VIVADO_SDKDIR)/dts/$(SYSTEM_DTS):  $(FPGA_BIT)
	@ $(MAKE) -C $(top_builddir)/fpga xlnx-devicetree; \
	  $(call hsi,write_devicetree)

$(LINUX_IMAGE):
	$(MAKE) $(AM_MAKEFLAGS) -C $(top_builddir) $@

$(DTS): $(VIVADO_SDKDIR)/dts/$(SYSTEM_DTS) $(LINUX_IMAGE)
	$(LINUX_BUILDDIR)/scripts/dtc/dtc -I dts -O dts -o $@ -i sdk/dts/ $<

$(DTB):  $(DTS) $(LINUX_IMAGE)
	$(LINUX_BUILDDIR)/scripts/dtc/dtc -I dts -O dtb -o $@ -i sdk/dts/ $<

bsp: ##@hsi write linux drivers template (MEN AT WORK HERE !!)
bsp: dts
	@ $(call hsi,write_linux_bsp)

print_name:
	@ echo "nam=$(NAME) ven=$(VENDOR) ver=$(VERSION) ful=$(FULL_NAME)"; echo ""

autotest_name:
	$(MAKE) print_name
	NAME=$(lastword $(vivado_CORES))    $(MAKE) print_name
	NAME=$(lastword $(vivado_PROJECTS)) $(MAKE) print_name
	VENDOR=pven NAME=pnam VERSION=5.55  $(MAKE) print_name
	VENDOR=pven NAME=pnam pnam_VERSION=5.55      $(MAKE) print_name
	VENDOR=pven NAME=pnam pven_pnam_VERSION=5.55 $(MAKE) print_name
	VENDOR=pven NAME=pven_pnam       $(MAKE) print_name
	VENDOR=pven NAME=pven_pnam_5.55  $(MAKE) print_name

bash:
	@ ${_envset}; \
	  /bin/bash

clean-local:
	-rm -rf .Xil .srcs webtalk_* *jou*.tcl \
	 vivado.jou  vivado.log  \
	 vivado_*.backup.jou  vivado_*.backup.log  vivado_pid*.str \
	 webtalk.jou  webtalk.log  \
	 webtalk_*.backup.jou  webtalk_*.backup.log vivado_hls.log

.PHONY: clean_project
clean_project: ##@projects Clean all build project files from disk
	@- rm -rf $(VIVADO_PRJDIR)/$(FULL_NAME){.,_}*

.PHONY: clean_ip
clean_ip: ##@cores Clean all built core files from disk
	@- rm -rf $(VIVADO_IPDIR)/${FULL_NAME} \
			  $(VIVADO_PRJDIR)/$(FULL_NAME){.,_}*

clean-all: ## perform all clean operations (ip, project, general)
clean-all: clean-local clean_project clean_ip
	@- $(foreach x,$(vivado_PROJECTS),$(info clean in project: $x)$(MAKE) clean_project NAME=$x;)
	@- $(foreach x,$(vivado_CORES),$(info clean in core: $x)$(MAKE) clean_ip NAME=$x;)

.PHONY: deploy
deploy: ## Copy all files to target device
deploy: $(FPGA_BIT) $(LINUX_IMAGE) $(DTB)
@WITH_DEVICE_SSHKEY_TRUE@	@ echo " --- deploying to target device: ${DEVICE_NAME} using key ---";
@WITH_DEVICE_SSHKEY_TRUE@	scp -i $(DEVICE_SSHKEY) $^ \
@WITH_DEVICE_SSHKEY_TRUE@	  $(DEVICE_USER)@$(DEVICE_IP):$(DEVICE_BOOT_DIR);
@WITH_DEVICE_SSHKEY_FALSE@@WITH_DEVICE_SSHPASSWD_TRUE@	@ echo " --- deploying to target device: ${DEVICE_NAME} using passwd ---";
@WITH_DEVICE_SSHKEY_FALSE@@WITH_DEVICE_SSHPASSWD_TRUE@	sshpass -p ${DEVICE_PASSWD} scp $^ \
@WITH_DEVICE_SSHKEY_FALSE@@WITH_DEVICE_SSHPASSWD_TRUE@	  $(DEVICE_USER)@$(DEVICE_IP):$(DEVICE_BOOT_DIR);
@WITH_DEVICE_SSHKEY_FALSE@@WITH_DEVICE_SSHPASSWD_FALSE@	@ echo "none of sshpass command or configured ssh key was found"

.PHONY: deploy_fpga
deploy_fpga: ##projects Start generated bitstream in target device
deploy_fpga: $(FPGA_BIT)
	@ echo ""; \
	  echo " WARNING: This will reprogram fpga without setting devicetree and kernel "
@WITH_DEVICE_SSHKEY_TRUE@	@ echo " --- deploying to target device: ${DEVICE_NAME} using key ---";
@WITH_DEVICE_SSHKEY_TRUE@	scp -i $(DEVICE_SSHKEY) $^ \
@WITH_DEVICE_SSHKEY_TRUE@	  $(DEVICE_USER)@$(DEVICE_IP):/tmp/fpga.bit; \
@WITH_DEVICE_SSHKEY_TRUE@	ssh -i $(DEVICE_SSHKEY) $(DEVICE_USER)@$(DEVICE_IP) "cat /tmp/fpga.bit > /dev/xdevcfg";
@WITH_DEVICE_SSHKEY_FALSE@@WITH_DEVICE_SSHPASSWD_TRUE@	@ echo " --- deploying to target device: ${DEVICE_NAME} using passwd ---";
@WITH_DEVICE_SSHKEY_FALSE@@WITH_DEVICE_SSHPASSWD_TRUE@	sshpass -p ${DEVICE_PASSWD} scp $^ \
@WITH_DEVICE_SSHKEY_FALSE@@WITH_DEVICE_SSHPASSWD_TRUE@	  $(DEVICE_USER)@$(DEVICE_IP):/tmp; \
@WITH_DEVICE_SSHKEY_FALSE@@WITH_DEVICE_SSHPASSWD_TRUE@	sshpass -p ${DEVICE_PASSWD} \
@WITH_DEVICE_SSHKEY_FALSE@@WITH_DEVICE_SSHPASSWD_TRUE@	  ssh $(DEVICE_USER)@$(DEVICE_IP) "cat /tmp/fpga.bit > /dev/xdevcfg";
@WITH_DEVICE_SSHKEY_FALSE@@WITH_DEVICE_SSHPASSWD_FALSE@	@ echo "none of sshpass command or configured ssh key was found"

fpga_install: INSTALL_DIR?=$(builddir)/package
fpga_install: ##install in INSTALL_DIR directory path for packaging
	mkdir -p $(INSTALL_DIR)
	install -v -D -t $(INSTALL_DIR)/boot $(FPGA_BIT) $(LINUX_IMAGE) $(DTB)

SOC_BOARD       ?= red_pitaya
VIVADO_VERSION  ?= 2015.4
VIVADO_SOC_PART ?= xc7z010clg400-1

export OUTDIR

.PRECIOUS: $(OUTDIR)/cores/%

$(OUTDIR)/cores/%: $(srcdir)/cores/%/core_config.tcl $(srcdir)/cores/%/*.v
	@ mkdir -p $(@D); \
	  ${_envset}; \
	  $(VIVADO) -source $(srcdir)/scripts/core.tcl -tclargs $* $(VIVADO_SOC_PART)

clean:
	-@ rm -rf $(OUTDIR)/cores

cores: $(addprefix vivado/cores/, $(CORES))
all: cores

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
